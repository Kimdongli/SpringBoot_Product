## Order

### 나이스 페이먼츠

```java
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.springframework.http.*;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.client.RestTemplate;

@Controller
public class NicepayController {
    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper objectMapper = new ObjectMapper();

    private final String CLIENT_ID = "S2_af4543a0be4d49a98122e01ec2059a56";
    private final String SECRET_KEY = "9eb85607103646da9f9c02b128f2e5ee";

    @RequestMapping("/")
    public String indexDemo(Model model){
        UUID id = UUID.randomUUID();
        model.addAttribute("orderId", id);
        model.addAttribute("clientId", CLIENT_ID);
        return "/index";
    }

    @RequestMapping(value="/cancel")
    public String cancelDemo(){
        return "/cancel";
    }

    @RequestMapping("/serverAuth")
    public String requestPayment(
            @RequestParam String tid,
            @RequestParam Long amount,
            Model model) throws Exception {

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map<String, Object> AuthenticationMap = new HashMap<>();
        AuthenticationMap.put("amount", String.valueOf(amount));

        HttpEntity<String> request = new HttpEntity<>(objectMapper.writeValueAsString(AuthenticationMap), headers);

        ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
            "https://sandbox-api.nicepay.co.kr/v1/payments/" + tid, request, JsonNode.class);

        JsonNode responseNode = responseEntity.getBody();
        String resultCode = responseNode.get("resultCode").asText();
        model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

        System.out.println(responseNode.toPrettyString());

        if (resultCode.equalsIgnoreCase("0000")) {
            // 결제 성공 비즈니스 로직 구현
        } else {
            // 결제 실패 비즈니스 로직 구현
        }

        return "/response";
    }

    @RequestMapping("/cancelAuth")
    public String requestCancel(
            @RequestParam String tid,
            @RequestParam String amount,
            Model model) throws Exception {

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Basic " + Base64.getEncoder().encodeToString((CLIENT_ID + ":" + SECRET_KEY).getBytes()));
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map<String, Object> AuthenticationMap = new HashMap<>();
        AuthenticationMap.put("amount", amount);
        AuthenticationMap.put("reason", "test");
        AuthenticationMap.put("orderId", UUID.randomUUID().toString());

        HttpEntity<String> request = new HttpEntity<>(objectMapper.writeValueAsString(AuthenticationMap), headers);

        ResponseEntity<JsonNode> responseEntity = restTemplate.postForEntity(
            "https://sandbox-api.nicepay.co.kr/v1/payments/"+ tid +"/cancel", request, JsonNode.class);

        JsonNode responseNode = responseEntity.getBody();
        String resultCode = responseNode.get("resultCode").asText();
        model.addAttribute("resultMsg", responseNode.get("resultMsg").asText());

        System.out.println(responseNode.toPrettyString());

        if (resultCode.equalsIgnoreCase("0000")) {
            // 취소 성공 비즈니스 로직 구현
        } else {
            // 취소 실패 비즈니스 로직 구현
        }

        return "/response";
    }

    @RequestMapping("/hook")
    public ResponseEntity<String> hook(@RequestBody HashMap<String, Object> hookMap) throws Exception {
        String resultCode = hookMap.get("resultCode").toString();

        System.out.println(hookMap);

        if(resultCode.equalsIgnoreCase("0000")){
            return ResponseEntity.status(HttpStatus.OK).body("ok");
        }

        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
    }
}
```

- __들고온후 CLIENT_ID,SECRET_KEY 는본인걸로 바꿔주고 response,cancel html을 템플릿에 따로 만들어준다.__
- __더미파일 https://www.mockaroo.com/__
- __더미파일 만들고 메모장으로 들어가서 수정후 더미파일 resources 파일안에 db파일을 만든후 db파일안에 더미파일 넣는다.__

### productdata
```sql
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Chocolate - Milk', description, 85578);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Crackers - Water', description, 161563);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Sesame Seed', description, 49863);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Cloves - Whole', description, 217433);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Apple - Delicious, Red', description, 91514);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Chinese Foods - Thick Noodles', description, 141863);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Crackers - Melba Toast', description, 47972);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Flour - Cake', description, 154071);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Beef - Top Butt', description, 58124);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Sugar - Icing', description, 269384);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Cup - 4oz Translucent', description, 52972);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Cheese - Comte', description, 17131);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Longos - Chicken Cordon Bleu', description, 191581);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Sage - Rubbed', description, 13396);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Ham - Proscuitto', description, 47767);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Flour - Buckwheat, Dark', description, 199470);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Vinegar - Tarragon', description, 203011);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Wine - Zinfandel Rosenblum', description, 124762);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Sprite, Diet - 355ml', description, 141221);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Browning Caramel Glace', description, 250405);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Bread - Frozen Basket Variety', description, 288577);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Cut Wakame - Hanawakaba', description, 175963);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Pasta - Canelloni, Single Serve', description, 101891);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Veal - Brisket, Provimi,bnls', description, 68074);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Salt - Kosher', description, 206631);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Bread Ww Cluster', description, 141155);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Crab - Dungeness, Whole', description, 36392);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Pepper - Red Chili', description, 110239);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Grenadillo', description, 5787);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Remy Red', description, 6132);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Wine - Coteaux Du Tricastin Ac', description, 83524);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Potato - Sweet', description, 4128);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Mushrooms - Black, Dried', description, 102414);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Cod - Salted, Boneless', description, 85181);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Rice - 7 Grain Blend', description, 282195);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Sandwich Wrap', description, 76653);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Lobster - Base', description, 134772);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Cinnamon - Stick', description, 87477);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Wine - Sawmill Creek Autumn', description, 208245);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Soup - Campbells Bean Medley', description, 116452);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Mortadella', description, 83700);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Chilli Paste, Sambal Oelek', description, 99124);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Creme De Banane - Marie', description, 227884);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Flour - Bread', description, 75389);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Chicken - Tenderloin', description, 136396);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Wine - Jaboulet Cotes Du Rhone', description, 254011);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Cookies - Englishbay Oatmeal', description, 246552);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Chips - Potato Jalapeno', description, 70880);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Spic And Span All Purpose', description, 18736);
insert into product (image, product_name,  description, price) values ('filepath/UUID/fileName', 'Melon - Watermelon, Seedless', description, 279679);
```
```sql
SET REFERENTIAL_INTEGRITY FALSE;
```
- __SET REFERENTIAL_INTEGRITY FALSE; 첫번쨰 줄에 추가__

```sql
truncate table user;
truncate table product;
truncate table option_tb;
truncate table order_tb;
truncate table cart_tb;
```
- __위에있는 sql은 필요없다(다시확인해보니 quantity가아니라 image로 바꿔서 하니 DB에 저장이 잘되었다.)__
- __모든 db삭제후 테이블 추가__
- __SQL은 Name을 _name으로 수정을해야한다.__

### userdata
```sql
insert into user (email, password, roles) values ('admin@green.com', 'Test1234!', 'ROLE_USER');
insert into user (email, password, roles) values ('dpafford1@linkedin.com', 'vF8.<>JV', 'ROLE_USER');
insert into user (email, password, roles) values ('cwarwick2@slideshare.net', 'vU7=W`uzQ7}?A', 'ROLE_USER');
insert into user (email, password, roles) values ('dcunniffe3@theglobeandmail.com', 'mF0=B\Oq7LQ', 'ROLE_USER');
insert into user (email, password, roles) values ('mfreeburn4@jugem.jp', 'mP7\ZBqIm|EWe,&.', 'ROLE_USER');
insert into user (email, password, roles) values ('ldyneley5@webmd.com', 'kB5|<3w*r{9\_', 'ROLE_USER');
insert into user (email, password, roles) values ('jcadalleder6@cdbaby.com', 'tL6\3o.Or&+B\7', 'ROLE_USER');
insert into user (email, password, roles) values ('sbegin7@mlb.com', 'dR9"7rs3_}', 'ROLE_USER');
insert into user (email, password, roles) values ('pbiasioli8@dailymail.co.uk', 'zU8?''X"Q''/1', 'ROLE_USER');
insert into user (email, password, roles) values ('dfalconer9@360.cn', 'cM6<nrn<', 'ROLE_USER');
```
- __userdata추가__
- __userdata중 password는 인코딩이(암호) 되어있으므로 추후에 바꿔야한다.__


### 결제
- __1. https://start.nicepay.co.kr/__
- __html로 바꿔서사용(cancel,response)__

### 회고
- __1. Board 포폴부터 완성한다.__
- __2. product 토큰인증__
- __3. 결제정보 추가__
---
- __DTO 유저 아이디로 들고와서 사용__
- __ERD작업,연관관계 맵핑, 데이터의 무결성(DTO 작업)__
